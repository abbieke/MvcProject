@model MvcProjectTest.Models.OrderStatusModel
@{
    ViewBag.Title = "OrderEdit";
    Layout = "~/Views/Shared/_BackStageLayout.cshtml";
    bool setUp = ViewBag.setUp;
    bool preparation = ViewBag.preparation;
    bool delivery = ViewBag.delivery;
    bool pickUp = ViewBag.pickUp;
    bool completePickup = ViewBag.completePickup;
    bool transactionComplete = ViewBag.transactionComplete;
}

@Styles.Render("~/Back-css/BackCustomerDetails")
<div class="">
    <div class="page-title">
        <div class="title_left">
            <h3>編輯訂單</h3>
        </div>

        <div class="title_right">
            <div class="col-md-5 col-sm-5 col-xs-12 form-group pull-right top_search">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search for...">
                    <span class="input-group-btn">
                        <button class="btn btn-default" type="button">Go!</button>
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="clearfix"></div>

    <div class="row">
        <div class="col-md-6 col-xs-12">

            <div class="x_panel">
                <div class="x_title">
                    <h2>訂單狀態資訊</h2>
                    <ul class="nav navbar-right panel_toolbox">
                        <li class="dropdown" style="visibility: hidden;">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">
                                <i class="fa fa-wrench"></i>
                            </a>
                            <ul class="dropdown-menu" role="menu">
                                <li>
                                    <a href="#">Settings 1</a>
                                </li>
                                <li>
                                    <a href="#">Settings 2</a>
                                </li>
                            </ul>
                        </li>
                        <li>
                            <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                        </li>
                        <li>
                            <a class="close-link"><i class="fa fa-close"></i></a>
                        </li>
                    </ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">
                    <!-- start form for validation -->
                    <form id="product-create-form" data-parsley-validate>

                        @Html.LabelFor(model => model.OrderID)
                        @Html.EditorFor(model => model.OrderID, new { htmlAttributes = new { @class = "form-control orderedit-orderid", @readonly = "readonly" } })

                        @Html.LabelFor(model => model.SetUp)
                        <div class="orderedit-textboxcontent">
                            <div class="orderedit-textbox"> @Html.TextBoxFor(model => model.SetUp, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })</div>
                            <div class="orderedit-checkbox">
                                @Html.CheckBox("SetUpname", new { @value = "", @class = "form-control from-check", @readonly = "readonly" })
                            </div>
                        </div>
                        @Html.TextBoxFor(model => model.SetUp, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })
                        @Html.CheckBox("SetUpname",setUp, new { @value = "", @class = "form-control", @readonly = "readonly" })
                        @Html.LabelFor(model => model.Preparation)
                        <div class="orderedit-textboxcontent">
                            <div class="orderedit-textbox">@Html.TextBoxFor(model => model.Preparation, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })</div>
                            <div class="orderedit-checkbox">
                                @Html.CheckBox("Preparationname", new { @value = "", @class = "form-control from-check", @readonly = "readonly" })
                            </div>
                        </div>
                        @Html.TextBoxFor(model => model.Preparation, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })
                        @Html.CheckBox("Preparationname",preparation, new { @value = "", @class = "form-control", @readonly = "readonly" })
                        @Html.LabelFor(model => model.Delivery)
                        <div class="orderedit-textboxcontent">
                            <div class="orderedit-textbox">
                                @Html.TextBoxFor(model => model.Delivery, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })
                            </div>
                            <div class="orderedit-checkbox">
                                @Html.CheckBox("Deliveryname", new { @value = "", @class = "form-control from-check", @readonly = "readonly" })
                            </div>
                        </div>
                        @Html.TextBoxFor(model => model.Delivery, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })
                        @Html.CheckBox("Deliveryname",delivery, new { @value = "", @class = "form-control", @readonly = "readonly" })
                        @Html.LabelFor(model => model.PickUp)
                        <div class="orderedit-textboxcontent">
                            <div class="orderedit-textbox">
                                @Html.TextBoxFor(model => model.PickUp, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })
                            </div>
                            <div class="orderedit-checkbox">
                                @Html.CheckBox("PickUpname", new { @value = "", @class = "form-control from-check", @readonly = "readonly" })
                            </div>
                        </div>
                        @Html.TextBoxFor(model => model.PickUp, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })
                        @Html.CheckBox("PickUpname",pickUp, new { @value = "", @class = "form-control", @readonly = "readonly" })
                        @Html.LabelFor(model => model.CompletePickup)
                        <div class="orderedit-textboxcontent">
                            <div class="orderedit-textbox">
                                @Html.TextBoxFor(model => model.CompletePickup, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })
                            </div>
                            <div class="orderedit-checkbox">
                                @Html.CheckBox("CompletePickupname", new { @value = "", @class = "form-control from-check", @readonly = "readonly" })
                            </div>
                        </div>
                        @Html.TextBoxFor(model => model.CompletePickup, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })
                        @Html.CheckBox("CompletePickupname",completePickup, new { @value = "", @class = "form-control", @readonly = "readonly" })
                        @Html.LabelFor(model => model.TransactionComplete)
                        <div class="orderedit-textboxcontent">
                            <div class="orderedit-textbox">
                                @Html.TextBoxFor(model => model.TransactionComplete, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })
                            </div>
                            <div class="orderedit-checkbox">
                                @Html.CheckBox("TransactionCompletename", new { @value = "", @class = "form-control from-check", @readonly = "readonly" })
                            </div>
                        </div>
                        @Html.TextBoxFor(model => model.TransactionComplete, new { @value = Model.SetUp.ToString(), @class = "form-control", @readonly = "readonly" })
                        @Html.CheckBox("TransactionCompletename",transactionComplete, new { @value = "", @class = "form-control", @readonly = "readonly" })
                        <input class="btn btn-info btn-xs" type="submit" value="Update" />
                    </form>
                    <!-- end form for validations -->

                </div>
            </div>
        </div>

    </div>
</div>
@section topCss {
    <style>
        .orderedit-orderid {
            margin-bottom:20px;
        }
        .orderedit-textboxcontent {
            display: flex;
            margin-bottom:20px;
        }

        .orderedit-textbox {
            width: 100%;
        }

        .orderedit-checkbox {
            width: 10%
        }

        .orderedit-checkbox .from-check {
                margin: 0;
                width:50px;
        }
    </style>
}
@Scripts.Render("~/Back-Script/BackCustomerDetails")
@section endScript
{
    <script>
        alert('@setUp');
        if ('@setUp' == 'True') {
            $( "#SetUpname" ).prop( "disabled", true );
        }
        if ('@preparation' == 'True') {
            $( "#Preparationname" ).prop( "disabled", true );
        }
        if ('@delivery' == 'True') {
            $( "#Deliveryname" ).prop( "disabled", true );
        }
        if ('@pickUp' == 'True') {
            $( "#PickUpname" ).prop( "disabled", true );
        }
        if ('@completePickup' == 'True') {
            $( "#CompletePickupname" ).prop( "disabled", true );
        }
        if ('@transactionComplete' == 'True') {
            $( "#TransactionCompletename" ).prop( "disabled", true );
        }
    </script>
}

